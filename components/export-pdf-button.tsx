"use client"

import { Button } from "@/components/ui/button"
import { Download, Loader2 } from "lucide-react"
import { useState } from "react"
import type { AnalysisResult } from "@/lib/types"

interface ExportPDFButtonProps {
  analysis: AnalysisResult
  title: string
  image?: string | null
}

export function ExportPDFButton({ analysis, title, image }: ExportPDFButtonProps) {
  const [isExporting, setIsExporting] = useState(false)

  const handleExport = async () => {
    setIsExporting(true)

    try {
      // Create a simple HTML report
      const reportHTML = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>${title} - UX Analysis Report</title>
          <style>
            body {
              font-family: system-ui, -apple-system, sans-serif;
              max-width: 800px;
              margin: 0 auto;
              padding: 40px 20px;
              color: #1a1a1a;
            }
            h1 { color: #6366f1; margin-bottom: 8px; }
            .score {
              font-size: 48px;
              font-weight: bold;
              color: ${analysis.overallScore >= 80 ? "#22c55e" : analysis.overallScore >= 60 ? "#f59e0b" : "#ef4444"};
              margin: 20px 0;
            }
            .summary {
              background: #f3f4f6;
              padding: 20px;
              border-radius: 8px;
              margin: 20px 0;
            }
            .issue {
              border-left: 4px solid;
              padding: 16px;
              margin: 16px 0;
              background: #f9fafb;
            }
            .critical { border-color: #ef4444; }
            .high { border-color: #f59e0b; }
            .medium { border-color: #eab308; }
            .low { border-color: #3b82f6; }
            .issue-title { font-weight: bold; margin-bottom: 8px; }
            .issue-category { 
              display: inline-block;
              background: #e5e7eb;
              padding: 4px 12px;
              border-radius: 4px;
              font-size: 12px;
              margin-bottom: 8px;
            }
            img { max-width: 100%; height: auto; margin: 20px 0; border-radius: 8px; }
            .scores-grid {
              display: grid;
              grid-template-columns: repeat(2, 1fr);
              gap: 16px;
              margin: 20px 0;
            }
            .score-card {
              background: #f9fafb;
              padding: 16px;
              border-radius: 8px;
              border: 1px solid #e5e7eb;
            }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          <p>Generated on ${new Date().toLocaleDateString()}</p>
          
          <div class="score">Overall Score: ${analysis.overallScore}/100</div>
          
          ${image ? `<img src="${image}" alt="Design Screenshot" />` : ""}
          
          <h2>Category Scores</h2>
          <div class="scores-grid">
            <div class="score-card">
              <strong>Accessibility:</strong> ${analysis.scores.accessibility}/100
            </div>
            <div class="score-card">
              <strong>Usability:</strong> ${analysis.scores.usability}/100
            </div>
            <div class="score-card">
              <strong>Visual Design:</strong> ${analysis.scores.visual}/100
            </div>
            <div class="score-card">
              <strong>Layout:</strong> ${analysis.scores.layout}/100
            </div>
          </div>
          
          <div class="summary">
            <h2>Summary</h2>
            <p>${analysis.summary}</p>
          </div>
          
          <h2>Issues Found (${analysis.issues.length})</h2>
          ${analysis.issues
            .map(
              (issue) => `
            <div class="issue ${issue.severity}">
              <div class="issue-category">${issue.category}</div>
              <div class="issue-title">${issue.title}</div>
              <p>${issue.description}</p>
              <p><strong>ðŸ’¡ Suggestion:</strong> ${issue.suggestion}</p>
            </div>
          `,
            )
            .join("")}
          
          <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280;">
            <p>Generated by UX Critic - AI-Powered UX Analysis</p>
          </footer>
        </body>
        </html>
      `

      // Create a blob and download
      const blob = new Blob([reportHTML], { type: "text/html" })
      const url = URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = `${title.replace(/[^a-z0-9]/gi, "-").toLowerCase()}-report.html`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error("[v0] Error exporting report:", error)
    } finally {
      setIsExporting(false)
    }
  }

  return (
    <Button onClick={handleExport} disabled={isExporting} variant="outline" className="gap-2 bg-transparent">
      {isExporting ? <Loader2 className="h-4 w-4 animate-spin" /> : <Download className="h-4 w-4" />}
      Export Report
    </Button>
  )
}
